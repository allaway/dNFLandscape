##read in segmentation data
if(!exists("segdata2"))
segdata2 <- cnv_segmented(TRUE)
#if(!exists("ascatData"))
#  ascatData<-ascatSegments()
#rename these
names(patients)<-cnv.dat$synapseID
names(tissueType)<-cnv.dat$synapseID
names(clnames)<-cnv.dat$synapseID
####Plot clusters - assumes we're in analysis directory!!
if(!exists("geneInfo"))
geneInfo<-read.table('../../data/hg19_geneInfo.txt')
idDiffVals<-function(segdat,byval='gene',metric='median',thresh=-0.5){
cnseg <- CNSeg(segdat)
rdseg <- getRS(cnseg, by = byval,geneMap=geneInfo, imput = FALSE, XY = FALSE, what =metric)
segM <- rs(rdseg)
nzvals<-which(apply(segM,1,function(x) any(as.numeric(x[-c(1:5)])<thresh)))
nzM<-segM[nzvals,]
print(paste('found',length(nzvals),byval,'values with logR values less than',thresh))
vals_by_gene=as.data.frame(dlply(nzM,'genename',function(x) colSums(x[,-c(1:5)])))
##genes by chromosome
res=nzM %>% group_by(chrom) %>% summarise(genes=n_distinct(genename))
##heatmaps by chromosome
nm=apply(vals_by_gene,2,as.numeric)
rownames(nm)<-rownames(vals_by_gene)
}
plotClusteredSegmentData<-function(segdat,byval='gene',metric='median',topGenes=100,prefix=''){
print(paste("Preparing to analyze segmented CNV data by",metric,'focusing on top',topGenes,byval))
##first get data matrix of regions by gene
cnseg <- CNSeg(segdat)
if(byval=='gene')
rdseg <- getRS(cnseg, by = byval,geneMap=geneInfo, imput = FALSE, XY = FALSE, what =metric)
else
rdseg <- getRS(cnseg, by = byval, imput = FALSE, XY = FALSE, what = metric)
segM <- rs(rdseg)
col.inds=4:ncol(segM)
if(byval=='gene')
col.inds=6:ncol(segM)
##create data matrix from segM output
M <- t(do.call("rbind", lapply(col.inds, function(i) as.numeric(as.character(segM[,i])))))
#    idxs <- match(colnames(segM)[col.inds], sample.names)
colnames(M)<-colnames(segM)[col.inds]
if(byval=='gene'){
rownames(M)<-segM[,5]
##reduce matrix by individual genes
print("Reducing matrix to individual genes")
redM<-sapply(unique(rownames(M)),function(x){
mm<-which(rownames(M)==x)
if(length(mm)==1)
return(M[mm,])
else
return(colMeans(M[mm,]))})
M<-t(redM)
}
#filter out zero variance
allvars<-apply(M,1,var,na.rm=T)
if(length(which(allvars==0))>0){
M<-M[-which(allvars==0),]
allvars=allvars[-which(allvars==0)]
}
##ANalysis 0: cluster ALL gene/regions
fname=paste('all',byval,'by',metric,'logRRatios.pdf',sep='_')
pdf(fname)
tm<-M
pc=prcomp(t(tm),scale.=T,center.=T)
gb<-ggbiplot(pc,groups=as.factor(patients[colnames(M)]),choices=1:2,obs.scale=1,var.scale=1,ellipse=TRUE,var.axes=FALSE) +
scale_color_discrete(name = '')# +
#theme(legend.direction = 'horizontal', legend.position = 'top')
print(gb)
dev.off()
colnames(tm) <- clnames[colnames(M)]
fname=paste('all',byval,'by',metric,'logRRatios_dendro.png',sep='_')
png(fname)
plot(hclust(dist(t(tm)),method="ward.D2"),main="Clustering of samples based on distance")
dev.off()
write.table(M,file=paste(metric,'logRRatioValuesBy',byval,'.txt',sep=''))
##Analysis 1: how do top 100 most variable genes cluster?
tm=M[order(allvars,decreasing=T)[1:100],]
#print(head(M))
if(byval=='gene')
nfcor=apply(tm,1,function(x) cor(x,M['NF1',]))
else
nfcor=rep(0,nrow(M))
fname=paste('most_variable',topGenes,byval,'by',metric,'logRRatios.pdf',sep='_')
pdf(fname)
pc=prcomp(t(tm),scale.=T,center.=T)
gb<-ggbiplot(pc,groups=as.factor(patients[colnames(M)]),choices=1:2,obs.scale=1,var.scale=1,ellipse=TRUE,var.axes=FALSE) +
scale_color_discrete(name = '') #+
#      theme(legend.direction = 'horizontal', legend.position = 'top')
print(gb)
colnames(tm) <- clnames[colnames(M)]
dev.off()
fname=paste('most_variable',topGenes,byval,'by',metric,'logRRatios_dendro.png',sep='_')
png(fname)
plot(hclust(dist(t(tm)),method="ward.D2"),main="Clustering of samples based on distance")
dev.off()
fname=paste('most_variable',topGenes,byval,'by',metric,'logRRatios_heatmap.png',sep='_')
colnames(tm)<-names(colnames(tm))
if(byval=='gene')
pheatmap(tm,annotation_row=data.frame(NF1Corr=nfcor),
annotation_col=data.frame(Patient=patients,Tissue=tissueType),cellwidth=10,cellheight=10,file=fname)
else
pheatmap(tm,annotation_col=data.frame(Patient=patients),cellwidth=10,cellheight=10,file=fname)
## Analysis 2
##let's do supervised clustering, look for cnv values that correlate with tissueType
gcors=abs(apply(M,1,function(x) cor(x,as.numeric(as.factor(tissueType[colnames(M)])))))
#                or regression p-values
#                let's rank all genes by absolute correlation for future functional enrichment!!!!
write(names(gcors)[order(gcors,decreasing=T)],file='geneRankByAbsCorTissueType.txt')
#                                     sf=File(filename,parentId='syn5014748')
#                                     used(sf)<-synGet('syn5015035')
#                                     synStore(sf)
#                                    now let's take top 100 genes and plot/cluster again
tm=M[order(gcors,decreasing=T)[1:100],]
fname=paste('most_tissue_correlated',topGenes,byval,'by',metric,'logRRatios.pdf',sep='_')
pdf(fname)
pc=prcomp(t(tm),scale.=T,center.=T)
ggbiplot(pc,groups=as.factor(patients[colnames(tm)]),choices=1:2,obs.scale=1,var.scale=1,ellipse=TRUE,var.axes=FALSE) #+
scale_color_discrete(name = '') #+
#theme(legend.direction = 'horizontal', legend.position = 'top')
dev.off()
fname=paste('most_tissue_correlated',topGenes,byval,'by',metric,'logRRatios_dendro.png',sep='_')
png(fname)
colnames(tm) <- clnames[colnames(tm)]
plot(hclust(dist(t(tm))),main="Clustering of samples based on distance")
dev.off()
fname=paste('most_tissue_correlated',topGenes,byval,'by',metric,'logRRatios_heatmap.png',sep='_')
colnames(tm)<-names(colnames(tm))
if(byval=='gene')
pheatmap(tm,annotation_col=data.frame(TissueType=tissueType,Patient=patients),
cellwidth=10,cellheight=10,file=fname)
else
pheatmap(tm,annotation_col=data.frame(TissueType=tissueType,Patient=patients),
cellwidth=10,cellheight=10,file=fname)
}
#here are the primary tasks we want to do
main<-function(){
plotClusteredSegmentData(segdata2,'gene','median',100)
#  plotClusteredSegmentData(segdata2,'gene','median',1000)
plotClusteredSegmentData(segdata2,'region','median',100)
#  plotClusteredSegmentData(segdata2,'region','median',1000)
}
install.packages(CNTools, ggbiplot, pheatmap)
install.packages(CNTools, ggbiplot)
install.packages(ggbiplot)
install.packages("CNTools", "ggbiplot", "pheatmap")
install.packages("CNTools")
??biocInstaller
biocLite()
source("https://bioconductor.org/biocLite.R")
biocLite("CNTools")
biocLite(pheatmap)
source("https://bioconductor.org/biocLite.R")
biocLite("pheatmap")
source("https://bioconductor.org/biocLite.R")
biocLite("ggbiplot")
install.packages("Hmisc")
install.packages(dplyr)
install.packages("dplyr")
install.packages("tidyR")
y
install.packages(tidyr)
install.packages("tidyr")
install.packages("ggplot2")
install.packages(ggplot)
install.packages("ggplot")
?edgeR()
source("http://bioconductor.org/biocLite.R")
biocLite("baySeq")
library(baySeq)
load("mobData.RData")
head(mobData)
bData.RData")
load("mobData.RData")
load("mobData.RData")
library(synapseClient)
synapseLogin(username = "allawayr", password = "reconcile88&")
library(data.table)
require(parallel)
patient_tumor_number_rna<-function(idlist,quant='cuffLinks'){
if(tolower(quant)=='cufflinks'){
##the PBK ids are missing from table, so need to query annotations
res<-synQuery("select patientID,tissueID,sampleID from entity where parentId=='syn5492805'")
# map<-unique(res)
#from table get generic tumor id
tres<-synTableQuery("SELECT Patient,RnaID,TumorNumber,'RNASeq (Cufflinks)' FROM syn5556216 where RnaID is not NULL")@values
idx<-match(res$entity.id,tres$`RNASeq (Cufflinks)`)
dres<-res[which(!is.na(idx)),]
tres<-tres[idx[which(!is.na(idx))],]
full.map<-cbind(dres,tres)
#map tumors to sample ids
sampleIds<-sapply(idlist,function(x){
y=which(full.map$entity.sampleID==gsub('X','',gsub('.','-',x,fixed=T)))
paste("Patient",full.map$Patient[y],"Tumor",full.map$TumorNumber[y])
})
}else if(tolower(quant)=='featurecounts'){
res<-synTableQuery("SELECT Patient,TumorNumber,RNASeq FROM syn5556216 where RNASeq is not NULL")@values
sampleIds<-sapply(idlist,function(x){
y=which(res$RNASeq==gsub('”','',x))
paste("Patient",res$Patient[y],"Tumor",res$TumorNumber[y])
})
}
return(sampleIds)
}
rna_annotations<-function(){
synq=synapseQuery("select name,id,patientID,tissueID,alternateTumorID from entity where parentId=='syn5493036'")
colnames(synq)<-c('patientId','alternateTumorId','fileName','tissueId','synapseId')
synq=synq[grep('_featureCounts.txt',synq$fileName),]
return(synq)
}
rna_cufflinks_annotations<-function(){
synq=synapseQuery("select sampleID,patientID,tissueID,tissueType,alternateTumorID from entity where parentId=='syn5492805'")
colnames(synq)<-c('tissueType','patientID','sampleID','altTumorID','tissueID','synapseID')
return(synq)
}
rna_bam_annotations<-function(){
synq=synapseQuery("select name,id,patientID,tissueID,alternateTumorID from entity where parentId=='syn4984620'")
colnames(synq)<-c('patientID','alternateTumorId','fileName','tissueId','synapseId')
synq=synq[grep('.bam$',synq$fileName),]
return(synq)
}
##here are the count files analyzed by featureCounts
rna_count_matrix<-function(stored=TRUE,doNorm=FALSE,minCount=0,doLogNorm=FALSE,doVoomNorm=FALSE){
if(!stored){
synq=synapseQuery("select name,id,patientID,tissueID from entity where parentId=='syn5493036'")
synq<-synq[grep("accepted_hits",synq$entity.name),]
synfiles<-sapply(synq$entity.id,synGet)
#now read in alfilel values
allfs<-lapply(synfiles,function(x) read.table(x@filePath,header=T,as.is=T))
names(allfs)<-synq$entity.id
#now get individual genes to create data matrix
hugo.genes<-unique(allfs[[1]][,2])
#now let's get individual counts across patient samples
gene.pat.mat<-sapply(hugo.genes,function(x,allfs){
res<-sapply(names(allfs),function(y){
mat<-allfs[[y]]
sum(mat[which(mat[,2]==x),1])})
names(res)<-names(allfs)
res
},allfs)
colnames(gene.pat.mat)<-hugo.genes
write.table(gene.pat.mat,file='featureCountsByGeneBySample.txt',row.names=T,col.names=T)
sf=File('featureCountsByGeneBySample.txt',parentId='syn4984701')
synStore(sf,used=list(list(name='dermalNFData.R',
url='https://raw.githubusercontent.com/Sage-Bionetworks/dermalNF/master/bin/dermalNFData.R')),
activityName='Create matrix of all counts across samples')
}else{
gene.pat.mat<-read.table(synGet('syn5051784')@filePath)
}
gene.pat.mat<-t(gene.pat.mat)
if(doNorm){
print('Performing size factor adjustment to samples')
require(DESeq2)
samp=data.frame(SampleID=colnames(gene.pat.mat))
cds<- DESeqDataSetFromMatrix(gene.pat.mat,colData=samp,~SampleID)#now collect proteomics data
sizeFac<-estimateSizeFactors(cds)
normCounts<-assay(cds)/sizeFac@colData$sizeFactor
colnames(normCounts)<-colnames(gene.pat.mat)
gene.pat.mat<-normCounts
}else if(doLogNorm){
print("Performing variance stabilizing log2 normalization")
require(DESeq2)
samp=data.frame(SampleID=colnames(gene.pat.mat))
cds<- DESeqDataSetFromMatrix(gene.pat.mat,colData=samp,~SampleID)#now collect proteomics data
vstab=rlog(cds)
varmat<-assay(vstab)
colnames(varmat)<-colnames(gene.pat.mat)
gene.pat.mat<-varmat
minCount=log2(minCount)
}else if(doVoomNorm){
print("Performing VOOM normalization")
library(limma)
ret = voomWithQualityWeights(gene.pat.mat)$E
}
sel.vals=which(apply(gene.pat.mat,1,function(x) all(x>=minCount)))
if(doVoomNorm)
gene.pat.mat=ret
return(gene.pat.mat[sel.vals,])
}
fpkm_annotations<-function(x){
fpkm_files=synQuery("select sampleID,tissueID,patientID from entity where parentId=='syn5492805'")
colnames(fpkm_files)<-c('patient','sample','tissue','entity')
tumNum<-synTableQuery('select Patient,RnaID,TumorNumber from syn5556216 where RNASeq is not NULL')@values
fpkm_files$patient=sapply(fpkm_files$patient,function(x) gsub('CT0+','',x))
fpkm_files$sample=sapply(fpkm_files$sample,function(x) paste('X',gsub("-",'.',x),sep=''))
fpkm_files$TumorNumber=apply(fpkm_files,1,function(x) tumNum$TumorNumber[intersect(which(tumNum$Patient==x[[1]]),which(tumNum$RnaID==gsub('00','',x[[3]])))])
fpkm_files
}
patient_tumor_number_rna<-function(idlist,quant='cuffLinks'){
if(tolower(quant)=='cufflinks'){
##the PBK ids are missing from table, so need to query annotations
res<-synQuery("select patientID,tissueID,sampleID from entity where parentId=='syn5492805'")
# map<-unique(res)
#from table get generic tumor id
tres<-synTableQuery("SELECT Patient,RnaID,TumorNumber,'RNASeq (Cufflinks)' FROM syn5556216 where RnaID is not NULL")@values
idx<-match(res$entity.id,tres$`RNASeq (Cufflinks)`)
dres<-res[which(!is.na(idx)),]
tres<-tres[idx[which(!is.na(idx))],]
full.map<-cbind(dres,tres)
head(tres)
sampleIds<-sapply(idlist,function(x){
y=which(full.map$entity.sampleID==gsub('X','',gsub('.','-',x,fixed=T)))
paste("Patient",full.map$Patient[y],"Tumor",full.map$TumorNumber[y])
})
if(tolower(quant)=='cufflinks'){
##the PBK ids are missing from table, so need to query annotations
res<-synQuery("select patientID,tissueID,sampleID from entity where parentId=='syn5492805'")
# map<-unique(res)
#from table get generic tumor id
tres<-synTableQuery("SELECT Patient,RnaID,TumorNumber,'RNASeq (Cufflinks)' FROM syn5556216 where RnaID is not NULL")@values
idx<-match(res$entity.id,tres$`RNASeq (Cufflinks)`)
dres<-res[which(!is.na(idx)),]
tres<-tres[idx[which(!is.na(idx))],]
full.map<-cbind(dres,tres)
#map tumors to sample ids
sampleIds<-sapply(idlist,function(x){
y=which(full.map$entity.sampleID==gsub('X','',gsub('.','-',x,fixed=T)))
paste("Patient",full.map$Patient[y],"Tumor",full.map$TumorNumber[y])
})
}else if(tolower(quant)=='featurecounts'){
res<-synTableQuery("SELECT Patient,TumorNumber,RNASeq FROM syn5556216 where RNASeq is not NULL")@values
sampleIds<-sapply(idlist,function(x){
y=which(res$RNASeq==gsub('”','',x))
paste("Patient",res$Patient[y],"Tumor",res$TumorNumber[y])
})
}
return(sampleIds)
patient_tumor_number_rna<-function(idlist,quant='cuffLinks'){
if(tolower(quant)=='cufflinks'){
##the PBK ids are missing from table, so need to query annotations
res<-synQuery("select patientID,tissueID,sampleID from entity where parentId=='syn5492805'")
# map<-unique(res)
#from table get generic tumor id
tres<-synTableQuery("SELECT Patient,RnaID,TumorNumber,'RNASeq (Cufflinks)' FROM syn5556216 where RnaID is not NULL")@values
idx<-match(res$entity.id,tres$`RNASeq (Cufflinks)`)
dres<-res[which(!is.na(idx)),]
tres<-tres[idx[which(!is.na(idx))],]
full.map<-cbind(dres,tres)
#map tumors to sample ids
sampleIds<-sapply(idlist,function(x){
y=which(full.map$entity.sampleID==gsub('X','',gsub('.','-',x,fixed=T)))
paste("Patient",full.map$Patient[y],"Tumor",full.map$TumorNumber[y])
})
}else if(tolower(quant)=='featurecounts'){
res<-synTableQuery("SELECT Patient,TumorNumber,RNASeq FROM syn5556216 where RNASeq is not NULL")@values
sampleIds<-sapply(idlist,function(x){
y=which(res$RNASeq==gsub('”','',x))
paste("Patient",res$Patient[y],"Tumor",res$TumorNumber[y])
})
}
return(sampleIds)
}
rna_annotations<-function(){
synq=synapseQuery("select name,id,patientID,tissueID,alternateTumorID from entity where parentId=='syn5493036'")
colnames(synq)<-c('patientId','alternateTumorId','fileName','tissueId','synapseId')
synq=synq[grep('_featureCounts.txt',synq$fileName),]
return(synq)
}
rna_cufflinks_annotations<-function(){
synq=synapseQuery("select sampleID,patientID,tissueID,tissueType,alternateTumorID from entity where parentId=='syn5492805'")
colnames(synq)<-c('tissueType','patientID','sampleID','altTumorID','tissueID','synapseID')
return(synq)
}
library(GSEABase)
library(GSVA)
library(ggplot2)
source("../../bin/encodeSkinRNASeq.R")
## now get dermal NF data and cluster alongisde
source("../../dermalNF/bin/dermalNFData.R")
dermals = rna_fpkm_matrix(byIsoform = FALSE)
# count_matrix(stored=TRUE,doNorm=FALSE,minCount=2,doLogNorm=FALSE,doVoomNorm=TRUE)
skin = getGeneNamesForMatrix(getEncodeSkinMatrix(metric = "FPKM", alignment = "hg19",
doVoomNorm = FALSE))
over = intersect(rownames(dermals), rownames(skin))
## which annotation should we do? Are they really just duplicates of one another?
## step 1 - just combine all
comb = cbind(dermals[over, ], skin[over, ])
## step 2, remove values below a particular FPKM, let's say 0.1 - for ALL genes
expr <- 1:nrow(comb)  ##which(apply(comb,1,function(x) all(x>0.2)))
expr <- setdiff(expr, expr[union(grep("MIR", rownames(comb)[expr]), grep("SNO", rownames(comb)[expr]))])
## step 3, normalize
require(limma)
comb.norm = data.frame(voomWithQualityWeights(comb[expr, ])$E)
comb.norm$Gene = rownames(comb.norm)
comb.norm2 = comb.norm[1:66]
comb.norm2 <- as.matrix(comb.norm2)
cs.res<-read.delim(synGet('syn7810244')@filePath,sep="\t",header=T)
##the PBK ids are missing from table, so need to query annotations
res<-synQuery("select patientID,tissueID,sampleID from entity where parentId=='syn5492805'")
#map<-unique(res)
#from table get generic tumor id
tres<-synTableQuery("SELECT Patient,RnaID,TumorNumber,'RNASeq (Cufflinks)' FROM syn5556216 where RnaID is not NULL")@values
idx<-match(res$entity.id,tres$`RNASeq (Cufflinks)`)
dres<-res[which(!is.na(idx)),]
tres<-tres[idx[which(!is.na(idx))],]
full.map<-cbind(dres,tres)
source('../../bin/encodeSkinRNASeq.R')
cibersort.df <- t(read.table(synGet("syn7810244")@filePath,sep='\t',header=T))
header <- c(cibersort.df[1,])
cibersort.df <- cibersort.df[2:26,]
colnames(cibersort.df) <- header
skin.type <- getSampleNamesForMatrix(cibersort.df)
skin.IDs <- rownames(skin.type)
skin.type.s <- c(paste((skin.type$Sample), skin.IDs, sep = " "))
full.map$entity.sampleID <- gsub("-", ".", full.map$entity.sampleID, fixed = TRUE)
full.map$entity.sampleID <- paste("X",full.map$entity.sampleID, sep = "")
sampleIds<-sapply(cs.res$Input.Sample,function(x){
y=which(full.map$entity.sampleID==gsub('”','',x))
paste("Patient",full.map$Patient[y],"Tumor",full.map$TumorNumber[y])
})
all.names <- c(sampleIds[1:33], skin.type.s[34:66])
colnames(comb.norm2) <- all.names
## requires gene set collection in wd from MUTSIGDB
## http://software.broadinstitute.org/gsea/downloads.jsp
oncogenic.sigs <- getGmt("c6.all.v5.2.symbols.gmt", collectionType = BroadCollection(category = "c6"),
geneIdType = SymbolIdentifier())
hallmark.sigs <- getGmt("h.all.v5.2.symbols.gmt", collectionType = BroadCollection(category = "h"),
geneIdType = SymbolIdentifier())
immunologic.sigs <- getGmt("c7.all.v5.2.symbols.gmt", collectionType = BroadCollection(category = "h"),
geneIdType = SymbolIdentifier())
this.file <- "https://github.com/allaway/dNFLandscape/blob/master/analysis/2016-11-22/GSVA_ENCODE_dNF.R"
setwd("~/Documents/dNFLandscape/analysis/2016-11-22")
library(GSEABase)
library(GSVA)
library(ggplot2)
source("../../bin/encodeSkinRNASeq.R")
## now get dermal NF data and cluster alongisde
source("../../dermalNF/bin/dermalNFData.R")
dermals = rna_fpkm_matrix(byIsoform = FALSE)
# count_matrix(stored=TRUE,doNorm=FALSE,minCount=2,doLogNorm=FALSE,doVoomNorm=TRUE)
skin = getGeneNamesForMatrix(getEncodeSkinMatrix(metric = "FPKM", alignment = "hg19",
doVoomNorm = FALSE))
over = intersect(rownames(dermals), rownames(skin))
## which annotation should we do? Are they really just duplicates of one another?
## step 1 - just combine all
comb = cbind(dermals[over, ], skin[over, ])
## step 2, remove values below a particular FPKM, let's say 0.1 - for ALL genes
expr <- 1:nrow(comb)  ##which(apply(comb,1,function(x) all(x>0.2)))
expr <- setdiff(expr, expr[union(grep("MIR", rownames(comb)[expr]), grep("SNO", rownames(comb)[expr]))])
## step 3, normalize
require(limma)
comb.norm = data.frame(voomWithQualityWeights(comb[expr, ])$E)
comb.norm$Gene = rownames(comb.norm)
comb.norm2 = comb.norm[1:66]
comb.norm2 <- as.matrix(comb.norm2)
cs.res<-read.delim(synGet('syn7810244')@filePath,sep="\t",header=T)
##the PBK ids are missing from table, so need to query annotations
res<-synQuery("select patientID,tissueID,sampleID from entity where parentId=='syn5492805'")
#map<-unique(res)
#from table get generic tumor id
tres<-synTableQuery("SELECT Patient,RnaID,TumorNumber,'RNASeq (Cufflinks)' FROM syn5556216 where RnaID is not NULL")@values
idx<-match(res$entity.id,tres$`RNASeq (Cufflinks)`)
dres<-res[which(!is.na(idx)),]
tres<-tres[idx[which(!is.na(idx))],]
full.map<-cbind(dres,tres)
source('../../bin/encodeSkinRNASeq.R')
cibersort.df <- t(read.table(synGet("syn7810244")@filePath,sep='\t',header=T))
header <- c(cibersort.df[1,])
cibersort.df <- cibersort.df[2:26,]
colnames(cibersort.df) <- header
skin.type <- getSampleNamesForMatrix(cibersort.df)
skin.IDs <- rownames(skin.type)
skin.type.s <- c(paste((skin.type$Sample), skin.IDs, sep = " "))
full.map$entity.sampleID <- gsub("-", ".", full.map$entity.sampleID, fixed = TRUE)
full.map$entity.sampleID <- paste("X",full.map$entity.sampleID, sep = "")
sampleIds<-sapply(cs.res$Input.Sample,function(x){
y=which(full.map$entity.sampleID==gsub('”','',x))
paste("Patient",full.map$Patient[y],"Tumor",full.map$TumorNumber[y])
})
all.names <- c(sampleIds[1:33], skin.type.s[34:66])
colnames(comb.norm2) <- all.names
## requires gene set collection in wd from MUTSIGDB
## http://software.broadinstitute.org/gsea/downloads.jsp
oncogenic.sigs <- getGmt("c6.all.v5.2.symbols.gmt", collectionType = BroadCollection(category = "c6"),
geneIdType = SymbolIdentifier())
hallmark.sigs <- getGmt("h.all.v5.2.symbols.gmt", collectionType = BroadCollection(category = "h"),
geneIdType = SymbolIdentifier())
immunologic.sigs <- getGmt("c7.all.v5.2.symbols.gmt", collectionType = BroadCollection(category = "h"),
geneIdType = SymbolIdentifier())
this.file <- "https://github.com/allaway/dNFLandscape/blob/master/analysis/2016-11-22/GSVA_ENCODE_dNF.R"
## immunologic signature gene set collection GSVA
#immunologic.GSVA <- gsva(comb.norm2, immunologic.sigs, rnaseq=TRUE)$es.obs
immunologic.ssGSEA <- gsva(comb.norm2, immunologic.sigs, method = "ssgsea")
oncogenic.GSVA <- gsva(comb.norm2, oncogenic.sigs, rnaseq=TRUE)$es.obs
oncogenic.ssGSEA <- gsva(comb.norm2, oncogenic.sigs, method = "ssgsea")
hallmark.GSVA <- gsva(comb.norm2, hallmark.sigs, rnaseq=TRUE)$es.obs
hallmark.ssGSEA <- gsva(comb.norm2, hallmark.sigs, rnaseq=TRUE, method = "ssgsea")
## immunologic signature gene set collection GSVA
#immunologic.GSVA <- gsva(comb.norm2, immunologic.sigs, rnaseq=TRUE)$es.obs
immunologic.ssGSEA <- gsva(comb.norm2, immunologic.sigs, method = "ssgsea")
#write.table(immunologic.GSVA, file = "immunologic_GSVA.txt", sep = "\t")
write.table(immunologic.ssGSEA, file = "immunologic_ssGSEA.txt", sep = "\t")
#synStore(File('immunologic_GSVA.txt', parentId = 'syn7818711'), used = 'syn7818713', executed = this.file, activityName = 'GSVA')
synStore(File('immunologic_ssGSEA.txt', parentId = 'syn7818711'), used = 'syn7818713', executed = this.file, activityName = 'ssGSEA')
library(pheatmap)
pheatmap(oncogenic.GSVA, fontsize_col = 2, fontsize_row = 1.3, border_color = FALSE, filename = 'oncogenic.GSVA.png')
synStore(File('oncogenic.GSVA.png', parentId = 'syn7818711'), used = 'syn7818712', executed = this.file, activityName = 'GSVA')
pheatmap(oncogenic.ssGSEA, fontsize_col = 2, fontsize_row = 1.3, border_color = FALSE, filename = 'oncogenic.ssGSEA.png')
synStore(File('oncogenic.ssGSEA.png', parentId = 'syn7818711'), used = 'syn7818712', executed = this.file, activityName = 'ssGSEA')
pheatmap(hallmark.GSVA, fontsize_col = 2, fontsize_row = 4, border_color = FALSE, filename = 'hallmark.GSVA.png')
synStore(File('hallmark.GSVA.png', parentId = 'syn7818711'), used = 'syn7818714', executed = this.file, activityName = 'GSVA')
pheatmap(hallmark.ssGSEA, fontsize_col = 2, fontsize_row = 4, border_color = FALSE, filename = 'hallmark.ssGSEA.png')
synStore(File('hallmark.ssGSEA.png', parentId = 'syn7818711'), used = 'syn7818714', executed = this.file, activityName = 'ssGSEA')
#pheatmap(immunologic.GSVA, fontsize_col = 2, fontsize_row = 0.25, border_color = FALSE, filename = 'immunologic.GSVA.png')
#synStore(File('immunologic.GSVA.png', parentId = 'syn7818711'), used = 'syn7818713', executed = this.file, activityName = 'GSVA')
pheatmap(immunologic.ssGSEA, fontsize_col = 2, fontsize_row = 0.25, border_color = FALSE, filename = 'immunologic.ssGSEA.png')
synStore(File('immunologic.ssGSEA.png', parentId = 'syn7818711'), used = 'syn7818713', executed = this.file, activityName = 'ssGSEA')
immunologic.GSVA <- gsva(comb.norm2, immunologic.sigs, rnaseq=TRUE)$es.obs
write.table(immunologic.GSVA, file = "immunologic_GSVA.txt", sep = "\t")
synStore(File('immunologic_GSVA.txt', parentId = 'syn7818711'), used = 'syn7818713', executed = this.file, activityName = 'GSVA')
pheatmap(immunologic.GSVA, fontsize_col = 2, fontsize_row = 0.25, border_color = FALSE, filename = 'immunologic.GSVA.png')
synStore(File('immunologic.GSVA.png', parentId = 'syn7818711'), used = 'syn7818713', executed = this.file, activityName = 'GSVA')

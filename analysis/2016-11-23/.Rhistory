getGeneNamesForMatrix<-function(matrix){
print('Getting gene names')
inds=sapply(rownames(matrix),function(x) match(unlist(strsplit(x,split='.',fixed=T))[1],gene.mapping[,1]))
gene.names<-as.character(gene.mapping[inds,2])
navals<-which(is.na(gene.names))
bvals=which(gene.names=='')
rmatrix=matrix[-c(navals,bvals),]
gn<-gene.names[-c(navals,bvals)]
dups=which(duplicated(gn))
rmatrix=rmatrix[-dups,]
gn=gn[-dups]
rownames(rmatrix)<-gn
return(rmatrix)
}
#get the actual matrix
getEncodeSkinMatrix<-function(metric=c('TPM','FPKM'),alignment=c('hg19','grch38'),doVoomNorm=T){
print(paste('Getting',metric,'of skin genes aligned to',alignment))
if(metric=='TPM')
if(alignment=='hg19')
si='syn6035991'
else
si='syn6035993'
else
if(alignment=='hg19')
si='syn6035999'
else
si='syn6035996'
tab<-read.table(synGet(si)@filePath,sep=',',header=T)
if(doVoomNorm){
print("Performing VOOM normalization")
library(limma)
tab = voomWithQualityWeights(tab)$E
}
return(tab)
}
clusterSamples<-function(metric='TPM',alignment='grch38'){
library(ggbiplot)
matrix=getGeneNamesForMatrix(getEncodeSkinMatrix(metric,alignment))
zv=which(apply(matrix,1,var)==0)
# zc<-which(apply(matrix,2,var)==0)
print('Clustering samples in matrix')
if(length(zv)>0){
matrix<-matrix[-zv,]
}
pc=prcomp(t(matrix),center=T,scale=T)
samps<-getSampleNamesForMatrix(matrix)
print(head(samps))
png(paste('pcPlotsForEncodeSkin',metric,'valuesAlignedTo',alignment,'.png',sep=''))
fname=paste('pcPlotsForEncodeSkin',metric,'valuesAlignedTo',alignment,'.png',sep='')
##plot by sample name
p<-ggbiplot(pc,groups=samps$Sample,var.axes=F)
ggsave(paste('bySample',fname,sep=''),p)
#cell type
p<-ggbiplot(pc,groups=samps$Type,var.axes=F)
ggsave(paste('byCell',fname,sep=''),p)
#library type
p<-ggbiplot(pc,groups=samps$Library,var.axes=F)
ggsave(paste('byLibrary',fname,sep=''),p)
#fractions
p<-ggbiplot(pc,groups=samps$Fraction,var.axes=F)
ggsave(paste('byFraction',fname,sep=''),p)
}
setwd("~/Documents/dNFLandscape/bin")
#encode data processing
require(synapseClient)
synapseLogin()
gene.mapping<-read.table('../../data/ensemblHugoGeneMapping.txt',header=T,sep='\t')
metadata<-read.table(synGet("syn6023670")@filePath,sep='\t',header=T)
##match the sample names to the metadata
getSampleNamesForMatrix<-function(matrix){
inds=match(colnames(matrix),metadata$File.accession)
df<-data.frame(Sample=metadata$Biosample.term.name[inds],
Type=metadata$Biosample.type[inds],
Library=metadata$Library.made.from[inds],
Age=metadata$Biosample.Age[inds],
Sex=metadata$Biosample.sex[inds],
Fraction=metadata$Biosample.subcellular.fraction.term.name[inds],
Replicate=metadata$Biological.replicate.s[inds])
rownames(df)<-colnames(matrix)
return(df)
}
##match hugo gene names to the ensembl gene names
getGeneNamesForMatrix<-function(matrix){
print('Getting gene names')
inds=sapply(rownames(matrix),function(x) match(unlist(strsplit(x,split='.',fixed=T))[1],gene.mapping[,1]))
gene.names<-as.character(gene.mapping[inds,2])
navals<-which(is.na(gene.names))
bvals=which(gene.names=='')
rmatrix=matrix[-c(navals,bvals),]
gn<-gene.names[-c(navals,bvals)]
dups=which(duplicated(gn))
rmatrix=rmatrix[-dups,]
gn=gn[-dups]
rownames(rmatrix)<-gn
return(rmatrix)
}
#get the actual matrix
getEncodeSkinMatrix<-function(metric=c('TPM','FPKM'),alignment=c('hg19','grch38'),doVoomNorm=T){
print(paste('Getting',metric,'of skin genes aligned to',alignment))
if(metric=='TPM')
if(alignment=='hg19')
si='syn6035991'
else
si='syn6035993'
else
if(alignment=='hg19')
si='syn6035999'
else
si='syn6035996'
tab<-read.table(synGet(si)@filePath,sep=',',header=T)
if(doVoomNorm){
print("Performing VOOM normalization")
library(limma)
tab = voomWithQualityWeights(tab)$E
}
return(tab)
}
clusterSamples<-function(metric='TPM',alignment='grch38'){
library(ggbiplot)
matrix=getGeneNamesForMatrix(getEncodeSkinMatrix(metric,alignment))
zv=which(apply(matrix,1,var)==0)
# zc<-which(apply(matrix,2,var)==0)
print('Clustering samples in matrix')
if(length(zv)>0){
matrix<-matrix[-zv,]
}
pc=prcomp(t(matrix),center=T,scale=T)
samps<-getSampleNamesForMatrix(matrix)
print(head(samps))
png(paste('pcPlotsForEncodeSkin',metric,'valuesAlignedTo',alignment,'.png',sep=''))
fname=paste('pcPlotsForEncodeSkin',metric,'valuesAlignedTo',alignment,'.png',sep='')
##plot by sample name
p<-ggbiplot(pc,groups=samps$Sample,var.axes=F)
ggsave(paste('bySample',fname,sep=''),p)
#cell type
p<-ggbiplot(pc,groups=samps$Type,var.axes=F)
ggsave(paste('byCell',fname,sep=''),p)
#library type
p<-ggbiplot(pc,groups=samps$Library,var.axes=F)
ggsave(paste('byLibrary',fname,sep=''),p)
#fractions
p<-ggbiplot(pc,groups=samps$Fraction,var.axes=F)
ggsave(paste('byFraction',fname,sep=''),p)
}
#encode data processing
require(synapseClient)
synapseLogin()
gene.mapping<-read.table('../data/ensemblHugoGeneMapping.txt',header=T,sep='\t')
metadata<-read.table(synGet("syn6023670")@filePath,sep='\t',header=T)
##match the sample names to the metadata
getSampleNamesForMatrix<-function(matrix){
inds=match(colnames(matrix),metadata$File.accession)
df<-data.frame(Sample=metadata$Biosample.term.name[inds],
Type=metadata$Biosample.type[inds],
Library=metadata$Library.made.from[inds],
Age=metadata$Biosample.Age[inds],
Sex=metadata$Biosample.sex[inds],
Fraction=metadata$Biosample.subcellular.fraction.term.name[inds],
Replicate=metadata$Biological.replicate.s[inds])
rownames(df)<-colnames(matrix)
return(df)
}
##match hugo gene names to the ensembl gene names
getGeneNamesForMatrix<-function(matrix){
print('Getting gene names')
inds=sapply(rownames(matrix),function(x) match(unlist(strsplit(x,split='.',fixed=T))[1],gene.mapping[,1]))
gene.names<-as.character(gene.mapping[inds,2])
navals<-which(is.na(gene.names))
bvals=which(gene.names=='')
rmatrix=matrix[-c(navals,bvals),]
gn<-gene.names[-c(navals,bvals)]
dups=which(duplicated(gn))
rmatrix=rmatrix[-dups,]
gn=gn[-dups]
rownames(rmatrix)<-gn
return(rmatrix)
}
#get the actual matrix
getEncodeSkinMatrix<-function(metric=c('TPM','FPKM'),alignment=c('hg19','grch38'),doVoomNorm=T){
print(paste('Getting',metric,'of skin genes aligned to',alignment))
if(metric=='TPM')
if(alignment=='hg19')
si='syn6035991'
else
si='syn6035993'
else
if(alignment=='hg19')
si='syn6035999'
else
si='syn6035996'
tab<-read.table(synGet(si)@filePath,sep=',',header=T)
if(doVoomNorm){
print("Performing VOOM normalization")
library(limma)
tab = voomWithQualityWeights(tab)$E
}
return(tab)
}
clusterSamples<-function(metric='TPM',alignment='grch38'){
library(ggbiplot)
matrix=getGeneNamesForMatrix(getEncodeSkinMatrix(metric,alignment))
zv=which(apply(matrix,1,var)==0)
# zc<-which(apply(matrix,2,var)==0)
print('Clustering samples in matrix')
if(length(zv)>0){
matrix<-matrix[-zv,]
}
pc=prcomp(t(matrix),center=T,scale=T)
samps<-getSampleNamesForMatrix(matrix)
print(head(samps))
png(paste('pcPlotsForEncodeSkin',metric,'valuesAlignedTo',alignment,'.png',sep=''))
fname=paste('pcPlotsForEncodeSkin',metric,'valuesAlignedTo',alignment,'.png',sep='')
##plot by sample name
p<-ggbiplot(pc,groups=samps$Sample,var.axes=F)
ggsave(paste('bySample',fname,sep=''),p)
#cell type
p<-ggbiplot(pc,groups=samps$Type,var.axes=F)
ggsave(paste('byCell',fname,sep=''),p)
#library type
p<-ggbiplot(pc,groups=samps$Library,var.axes=F)
ggsave(paste('byLibrary',fname,sep=''),p)
#fractions
p<-ggbiplot(pc,groups=samps$Fraction,var.axes=F)
ggsave(paste('byFraction',fname,sep=''),p)
}
View(full.map)
View(gene.mapping)
View(metadata)
setwd("~/Documents/dNFLandscape/analysis/2016-11-23")
source(../../bin/encodeSkinRNASeq.R)
source('../../bin/encodeSkinRNASeq.R')
View(metadata)
getSampleNamesForMatrix()
getSampleNamesForMatrix(read.table(synGet("syn7810244")@filePath,sep='\t',header=T))
getSampleNamesForMatrix(
cibersort.df <- read.table(synGet("syn7810244")@filePath,sep='\t',header=T))
cibersort.df <- t(read.table(synGet("syn7810244")@filePath,sep='\t',header=T))
View(cibersort.df)
cibersort.df <- read.table(synGet("syn7810244")@filePath,sep='\t',header=T)
View(cibersort.df)
header <- c(cibersort.df[1,])
cibersort.df <- t(read.table(synGet("syn7810244")@filePath,sep='\t',header=T))
header <- c(cibersort.df[1,])
View(cibersort.df)
View(cibersort.df)
cibersort.df <- dplyr::slice(cibersort.df, 2:26)
cibersort.df <- t(read.table(synGet("syn7810244")@filePath,sep='\t',header=T))
cibersort.df <- dplyr::slice(cibersort.df, 2:26)
cibersort.df <- cibersort.df, 2:26
cibersort.df <- cibersort.df[2:26,]
View(cibersort.df)
rownames(cibersort.df) <- header
colnames(cibersort.df) <- header
View(cibersort.df)
skin.header <- getSampleNamesForMatrix(cibersort.df)
View(skin.header)
View(full.map)
cibersort.df <- t(cs.res)
header <- c(cibersort.df[1,])
cibersort.df <- cibersort.df[2:26,]
colnames(cibersort.df) <- header
View(cs.res)
cibersort.df <- t(read.table(synGet("syn7810244")@filePath,sep='\t',header=T))
header <- c(cibersort.df[1,])
cibersort.df <- cibersort.df[2:26,]
colnames(cibersort.df) <- header
data.frame(dNFskin.map, 2, 66)
View(cs.res)
View(skin.header)
skin.names <- getSampleNamesForMatrix(cibersort.df)
rownames(cs.res[34:66,]) <- skin.header$Sample[34:66,]
rownames(cs.res[34:66,]) <- skin.header$Sample[34:66]
rownames(cs.res[34:66,]) <- skin.header$Sample
rownames(cs.res[34:66,]) <- skin.header[34:66, "Sample"]
rownames(cs.res[34:66,]) <- skin.header[34:66, 2]
rownames(cs.res[34:66,]) <- skin.header[34:66, 1]
rownames(cs.res[34:66,]) <- c(skin.header[34:66, 1])
c(skin.header[34:66, 1])
View(skin.header)
c(skin.header[34:66,1])
c(skin.header[34:66])
c(skin.header$Sample)
c("skin.header$Sample")
c(skin.header$"Sample")
rownames(cs.res) <- skin.names$Sample
rownames(cs.res) <- paste(skin.names$Sample, rownames(skin.names), sep = "-"
View(cs.res)
rownames(cs.res) <- paste(skin.names$Sample, rownames(skin.names), sep = "-")
View(cs.res)
rownames(cs.res[34:66]) <- paste(skin.names$Sample, rownames(skin.names), sep = "-")
rownames(cs.res[34:66,]) <- paste(skin.names$Sample, rownames(skin.names), sep = "-")
rownames(cs.res[34:66,]) <- paste(skin.names[34:66,1], rownames(skin.names), sep = "-")
rownames(cs.res[34:66,]) <- paste(skin.names[34:66,1], rownames(skin.names[34:66]), sep = "-")
rownames(cs.res[34:66,]) <- paste(skin.names[34:66,1], rownames(skin.names[34:66,1]), sep = "-")
skin.names <- getSampleNamesForMatrix(cibersort.df)
rownames(cs.res[34:66,]) <- paste(skin.names[34:66,1], rownames(skin.names[34:66,1]), sep = "-")
rownames(skin.names[34:66,1])
rownames(cs.res[34:66,]) <- paste(skin.names[34:66,1], rownames(skin.names[34:66,]), sep = "-")
cibersort.df <- t(read.table(synGet("syn7810244")@filePath,sep='\t',header=T))
header <- c(cibersort.df[1,])
cibersort.df <- cibersort.df[2:26,]
colnames(cibersort.df) <- header
skin.names <- getSampleNamesForMatrix(cibersort.df)
rownames(cs.res[34:66,]) <- paste(skin.names[34:66,1], rownames(skin.names[34:66,]), sep = "-")
View(cibersort.df)
View(cs.res)
##copy of 2016-09-16/rePlotCiberSort.R, adjusted for cibersort with dermals + skin
##replot cibersort
require(synapseClient)
synapseLogin()
cs.res<-read.delim(synGet('syn7810244')@filePath,sep="\t",header=T)
##the PBK ids are missing from table, so need to query annotations
res<-synQuery("select patientID,tissueID,sampleID from entity where parentId=='syn5492805'")
#map<-unique(res)
#from table get generic tumor id
tres<-synTableQuery("SELECT Patient,RnaID,TumorNumber,'RNASeq (Cufflinks)' FROM syn5556216 where RnaID is not NULL")@values
idx<-match(res$entity.id,tres$`RNASeq (Cufflinks)`)
dres<-res[which(!is.na(idx)),]
tres<-tres[idx[which(!is.na(idx))],]
full.map<-cbind(dres,tres)
#map tumors to sample ids
sampleIds<-sapply(cs.res$Input.Sample,function(x){
y=which(full.map$entity.sampleID==gsub('”','',x))
paste("Patient",full.map$Patient[y],"Tumor",full.map$TumorNumber[y])
})
rownames(cs.res)<-sampleIds
cs.res<-cs.res[,-1]
source('../../bin/encodeSkinRNASeq.R')
cibersort.df <- t(read.table(synGet("syn7810244")@filePath,sep='\t',header=T))
header <- c(cibersort.df[1,])
cibersort.df <- cibersort.df[2:26,]
colnames(cibersort.df) <- header
skin.names <- getSampleNamesForMatrix(cibersort.df)
rownames(cs.res[34:66,]) <- paste(skin.names[34:66,1], rownames(skin.names[34:66,]), sep = "-")
###this.file='#####'
library(pheatmap)
pheatmap(cs.res[,1:22],annotation_row=cs.res[,23:25],cellheight=10,cellwidth = 10,filename='ciberSortRePlotted.png')
##synStore(File('ciberSortRePlotted.png',parentId='syn5809348'),executed=list(list(url=this.file)))
require(synapseClient)
synapseLogin()
cs.res<-read.delim(synGet('syn7810244')@filePath,sep="\t",header=T)
res<-synQuery("select patientID,tissueID,sampleID from entity where parentId=='syn5492805'")
tres<-synTableQuery("SELECT Patient,RnaID,TumorNumber,'RNASeq (Cufflinks)' FROM syn5556216 where RnaID is not NULL")@values
idx<-match(res$entity.id,tres$`RNASeq (Cufflinks)`)
dres<-res[which(!is.na(idx)),]
tres<-tres[idx[which(!is.na(idx))],]
full.map<-cbind(dres,tres)
sampleIds<-sapply(cs.res$Input.Sample,function(x){
y=which(full.map$entity.sampleID==gsub('”','',x))
paste("Patient",full.map$Patient[y],"Tumor",full.map$TumorNumber[y])
})
rownames(cs.res)<-sampleIds
View(cs.res)
sampleIds<-sapply(cs.res$Input.Sample,function(x){
y=which(full.map$entity.sampleID==gsub('”','',x))
paste("Patient",full.map$Patient[y],"Tumor",full.map$TumorNumber[y])
})
View(full.map)
getSampleNames
tail(sampleIds)
rownames(cs.res)<-sampleIds
sampleIds[55]
sampleIds<-sapply(cs.res$Input.Sample,function(x){
y=which(full.map$entity.sampleID==gsub('”','',x))
paste("Patient",full.map$Patient[y],"Tumor",full.map$TumorNumber[y])
})
View(cs.res)
View(full.map)
View(full.map)
View(cs.res)
gsub(".", "-", full.map)
full.map$entity.sampleID <- gsub(".", "-", full.map$entity.sampleID)
View(full.map)
full.map<-cbind(dres,tres)
full.map$entity.sampleID <- gsub(".", "-", full.map$entity.sampleID, fixed = TRUE)
View(full.map)
full.map$entity.sampleID <- paste("X", full.map$entity.sampleID)
View(full.map)
full.map$entity.sampleID <- paste("X",full.map$entity.sampleID)
View(full.map)
full.map<-cbind(dres,tres)
full.map$entity.sampleID <- gsub(".", "-", full.map$entity.sampleID, fixed = TRUE)
full.map$entity.sampleID <- paste("X",full.map$entity.sampleID, sep = "")
View(full.map)
full.map$entity.sampleID <- gsub("-", ".", full.map$entity.sampleID, fixed = TRUE)
sampleIds<-sapply(cs.res$Input.Sample,function(x){
y=which(full.map$entity.sampleID==gsub('”','',x))
paste("Patient",full.map$Patient[y],"Tumor",full.map$TumorNumber[y])
})
View(skin.names)
skin.names.string <- c(skin.names[paste(skin.names$Sample), colnames(skin.names)])
c(skin.names[paste(skin.names$Sample), colnames(skin.names)])
skin.names.string <- c(skin.names[paste((skin.names$Sample), colnames(skin.names))])
skin.names.string <- c(skin.names[paste((skin.names$Sample), rownames(skin.names))])
skin.names.string <- c(skin.names[paste((skin.names$Sample), rownames(skin.names$Sample))])
skin.names.string <- c(paste((skin.names$Sample), rownames(skin.names$Sample))])
skin.names.string <- c(paste((skin.names$Sample), rownames(skin.names$Sample)))
tail(skin.names.string)
skin.names.string <- c(paste((skin.names$Sample), rownames(skin.names$Sample), sep = "-"))
skin.names <- getSampleNamesForMatrix(cibersort.df)
skin.names.string <- c(paste((skin.names$Sample), rownames(skin.names$Sample), sep = "-"))
tail(skin.names.string)
skin.type <- getSampleNamesForMatrix(cibersort.df)
skin.IDs <- rownames(skin.type)
skin.type.string <- c(paste((skin.type$Sample), skin.IDs, sep = "-"))
View(skin.type)
skin.type.s <- c(paste((skin.type$Sample), skin.IDs, sep = "-"))
all.names <- c(sampleIds, skin.type.s)
rownames(cs.res)<-sampleIds
all.names <- c(sampleIds[1:33], skin.type.s[34:66])
rownames(cs.res)<-all.names
cs.res<-cs.res[,-1]
View(cs.res)
library(pheatmap)
pheatmap(cs.res[,1:22],annotation_row=cs.res[,23:25],cellheight=10,cellwidth = 10,filename='ciberSortRePlotted.png')
pheatmap(cs.res[,1:22],annotation_row=cs.res[,23:25],cellheight=10,cellwidth = 10)
this.file='https://github.com/allaway/dNFLandscape/blob/master/analysis/2016-11-23/replot_CIBERSORT_dNF_skin.R'
pheatmap(cs.res[,1:22],annotation_row=cs.res[,23:25],cellheight=10,cellwidth = 10, filename = 'ciberSortRePlotted_dNF_skin.png')
synStore(File('ciberSortRePlotted.png',parentId='syn5809348'),executed=list(list(url=this.file)))
synStore(File('ciberSortRePlotted_dNF_skin.png',parentId='syn5809348'),executed=list(list(url=this.file)))
skin.type.s <- c(paste((skin.type$Sample), skin.IDs, sep = " "))
full.map$entity.sampleID <- gsub("-", ".", full.map$entity.sampleID, fixed = TRUE)
full.map$entity.sampleID <- paste("X",full.map$entity.sampleID, sep = "")
all.names <- c(sampleIds[1:33], skin.type.s[34:66])
skin.type.s <- c(paste((skin.type$Sample), skin.IDs, sep = " "))
full.map$entity.sampleID <- gsub("-", ".", full.map$entity.sampleID, fixed = TRUE)
full.map$entity.sampleID <- paste("X",full.map$entity.sampleID, sep = "")
all.names <- c(sampleIds[1:33], skin.type.s[34:66])
rownames(cs.res)<-all.names
cs.res<-cs.res[,-1]
this.file='https://github.com/allaway/dNFLandscape/blob/master/analysis/2016-11-23/replot_CIBERSORT_dNF_skin.R'
library(pheatmap)
pheatmap(cs.res[,1:22],annotation_row=cs.res[,23:25],cellheight=10,cellwidth = 10, filename = 'ciberSortRePlotted_dNF_skin.png')
##copy of 2016-09-16/rePlotCiberSort.R, adjusted for cibersort with dermals + skin
##replot cibersort
require(synapseClient)
synapseLogin()
cs.res<-read.delim(synGet('syn7810244')@filePath,sep="\t",header=T)
##the PBK ids are missing from table, so need to query annotations
res<-synQuery("select patientID,tissueID,sampleID from entity where parentId=='syn5492805'")
#map<-unique(res)
#from table get generic tumor id
tres<-synTableQuery("SELECT Patient,RnaID,TumorNumber,'RNASeq (Cufflinks)' FROM syn5556216 where RnaID is not NULL")@values
idx<-match(res$entity.id,tres$`RNASeq (Cufflinks)`)
dres<-res[which(!is.na(idx)),]
tres<-tres[idx[which(!is.na(idx))],]
full.map<-cbind(dres,tres)
source('../../bin/encodeSkinRNASeq.R')
sampleIds<-sapply(cs.res$Input.Sample,function(x){
y=which(full.map$entity.sampleID==gsub('”','',x))
paste("Patient",full.map$Patient[y],"Tumor",full.map$TumorNumber[y])
})
cibersort.df <- t(read.table(synGet("syn7810244")@filePath,sep='\t',header=T))
header <- c(cibersort.df[1,])
cibersort.df <- cibersort.df[2:26,]
colnames(cibersort.df) <- header
skin.type <- getSampleNamesForMatrix(cibersort.df)
skin.IDs <- rownames(skin.type)
skin.type.s <- c(paste((skin.type$Sample), skin.IDs, sep = " "))
full.map$entity.sampleID <- gsub("-", ".", full.map$entity.sampleID, fixed = TRUE)
full.map$entity.sampleID <- paste("X",full.map$entity.sampleID, sep = "")
all.names <- c(sampleIds[1:33], skin.type.s[34:66])
#map tumors to sample ids
rownames(cs.res)<-all.names
cs.res<-cs.res[,-1]
this.file='https://github.com/allaway/dNFLandscape/blob/master/analysis/2016-11-23/replot_CIBERSORT_dNF_skin.R'
library(pheatmap)
pheatmap(cs.res[,1:22],annotation_row=cs.res[,23:25],cellheight=10,cellwidth = 10, filename = 'ciberSortRePlotted_dNF_skin.png')
synStore(File('ciberSortRePlotted_dNF_skin.png',parentId='syn5809348'),executed=list(list(url=this.file)))
gene.mapping<-read.table('../../data/ensemblHugoGeneMapping.txt',header=T,sep='\t')
sampleIds[1:33]
require(synapseClient)
synapseLogin()
cs.res<-read.delim(synGet('syn7810244')@filePath,sep="\t",header=T)
res<-synQuery("select patientID,tissueID,sampleID from entity where parentId=='syn5492805'")
tres<-synTableQuery("SELECT Patient,RnaID,TumorNumber,'RNASeq (Cufflinks)' FROM syn5556216 where RnaID is not NULL")@values
idx<-match(res$entity.id,tres$`RNASeq (Cufflinks)`)
dres<-res[which(!is.na(idx)),]
tres<-tres[idx[which(!is.na(idx))],]
full.map<-cbind(dres,tres)
source('../../bin/encodeSkinRNASeq.R')
sampleIds<-sapply(cs.res$Input.Sample,function(x){
y=which(full.map$entity.sampleID==gsub('”','',x))
paste("Patient",full.map$Patient[y],"Tumor",full.map$TumorNumber[y])
})
cibersort.df <- t(read.table(synGet("syn7810244")@filePath,sep='\t',header=T))
header <- c(cibersort.df[1,])
cibersort.df <- cibersort.df[2:26,]
colnames(cibersort.df) <- header
skin.type <- getSampleNamesForMatrix(cibersort.df)
skin.IDs <- rownames(skin.type)
skin.type.s <- c(paste((skin.type$Sample), skin.IDs, sep = " "))
full.map$entity.sampleID <- gsub("-", ".", full.map$entity.sampleID, fixed = TRUE)
full.map$entity.sampleID <- paste("X",full.map$entity.sampleID, sep = "")
sampleIds<-sapply(cs.res$Input.Sample,function(x){
y=which(full.map$entity.sampleID==gsub('”','',x))
paste("Patient",full.map$Patient[y],"Tumor",full.map$TumorNumber[y])
})
cibersort.df <- t(read.table(synGet("syn7810244")@filePath,sep='\t',header=T))
header <- c(cibersort.df[1,])
cibersort.df <- cibersort.df[2:26,]
colnames(cibersort.df) <- header
skin.type <- getSampleNamesForMatrix(cibersort.df)
skin.IDs <- rownames(skin.type)
skin.type.s <- c(paste((skin.type$Sample), skin.IDs, sep = " "))
all.names <- c(sampleIds[1:33], skin.type.s[34:66])
rownames(cs.res)<-all.names
cs.res<-cs.res[,-1]
this.file='https://github.com/allaway/dNFLandscape/blob/master/analysis/2016-11-23/replot_CIBERSORT_dNF_skin.R'
library(pheatmap)
pheatmap(cs.res[,1:22],annotation_row=cs.res[,23:25],cellheight=10,cellwidth = 10, filename = 'ciberSortRePlotted_dNF_skin.png')
synStore(File('ciberSortRePlotted_dNF_skin.png',parentId='syn5809348'),executed=list(list(url=this.file)))

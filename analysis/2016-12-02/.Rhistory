plots <- apply(as.array(colnames(oncogenic.ssGSEA.df2)[2:51]),1,FUN=function (x)
qplot(annotation.names, oncogenic.ssGSEA.df2[,x], data = oncogenic.ssGSEA.df2) +
geom_boxplot(fill=c("red", "blue")) +
xlab("sample type") +
ylab(x) +
ggtitle(paste(x))
)
dev.off()
p.df$pathway <- rownames(p.df)
psig <- dplyr::filter(p.df,p<0.05)
##############################################
immunologic.ssGSEA.df2 <- cbind(annotation.names, immunologic.ssGSEA.df[,-1])
immunologic.ttest <- as.data.frame(sapply(immunologic.ssGSEA.df2[2:51],
function(x) t.test(x ~ immunologic.ssGSEA.df2$annotation.names)))
p <- c(unlist(immunologic.ttest[3,]))
p <- signif(p.adjust(p, method = "BH"), 3)
p.df <- as.data.frame(p)
rownames(p.df) <- sub(".p.value", "", rownames(p.df))
write.table(file = 'immunologic_p_values.txt', sep = "\t")
pdf('immuno_res.pdf')
plots <- apply(as.array(colnames(immunologic.ssGSEA.df2)[2:51]),1,FUN=function (x)
qplot(annotation.names, immunologic.ssGSEA.df2[,x], data = immunologic.ssGSEA.df2) +
geom_boxplot(fill=c("red", "blue")) +
xlab("sample type") +
ylab(x) +
ggtitle(paste(x))
)
dev.off()
p.df$pathway <- rownames(p.df)
psig <- dplyr::filter(p.df,p<0.05)
write.table(p.df, file = 'hallmark_p_values.txt', sep = "\t")
hallmark.ssGSEA.df2 <- cbind(annotation.names, hallmark.ssGSEA.df[,-1])
hallmark.ttest <- as.data.frame(sapply(hallmark.ssGSEA.df2[2:51],
function(x) t.test(x ~ hallmark.ssGSEA.df2$annotation.names)))
p <- c(unlist(hallmark.ttest[3,]))
p <- signif(p.adjust(p, method = "BH"), 3)
p.df <- as.data.frame(p)
rownames(p.df) <- sub(".p.value", "", rownames(p.df))
write.table(p.df, file = 'hallmark_p_values.txt', sep = "\t")
oncogenic.ssGSEA.df2 <- cbind(annotation.names, oncogenic.ssGSEA.df[,-1])
oncogenic.ttest <- as.data.frame(sapply(oncogenic.ssGSEA.df2[2:51],
function(x) t.test(x ~ oncogenic.ssGSEA.df2$annotation.names)))
p <- c(unlist(oncogenic.ttest[3,]))
p <- signif(p.adjust(p, method = "BH"), 3)
p.df <- as.data.frame(p)
rownames(p.df) <- sub(".p.value", "", rownames(p.df))
write.table(file = 'oncogenic_p_values.txt', sep = "\t")
write.table(p.df, file = 'oncogenic_p_values.txt', sep = "\t")
immunologic.ssGSEA.df2 <- cbind(annotation.names, immunologic.ssGSEA.df[,-1])
immunologic.ttest <- as.data.frame(sapply(immunologic.ssGSEA.df2[2:51],
function(x) t.test(x ~ immunologic.ssGSEA.df2$annotation.names)))
p <- c(unlist(immunologic.ttest[3,]))
p <- signif(p.adjust(p, method = "BH"), 3)
p.df <- as.data.frame(p)
rownames(p.df) <- sub(".p.value", "", rownames(p.df))
write.table(p.df, file = 'immunologic_p_values.txt', sep = "\t")
coef.glmnet(oncogenic.glm)
pdf("oncogenicGLMnet.pdf")
plot.glmnet(oncogenic.glm)
dev.off()
pdf("oncogenicGLMnet_output.pdf")
print.glmnet(oncogenic.glm)
coef.glmnet(oncogenic.glm)
dev.off()
tsv()
csv()
file?
f
?file
file("oncogenicGLMnet_output.txt")
print.glmnet(oncogenic.glm)
coef.glmnet(oncogenic.glm)
dev.off()
?pdf
?write.table()
write.table(summary(oncogenic.glm), file = "oncogenicGLMnet_output.txt", sep = "/t")
pdf("oncogenic.randomforest.full.pdf")
plot(oncogenic.rFull)
varImpPlot(oncogenic.rFull, n.var=20)
dev.off()
hallmark.glm<-glmnet(x = hallmark.input, y = annotation, alpha =1, lambda.min.ratio = coeffi)
hallmark.glm<-glmnet(x = hallmark.input, y = annotation, alpha =1)
##modified from http://dni-institute.in/blogs/random-forest-using-r-step-by-step-tutorial/
sample.ind <- sample(2,
nrow(oncogenic.ssGSEA.df),
replace = T,
prob = c(0.6,0.4))
oncogenic.ssGSEA.dev <- oncogenic.ssGSEA.df[sample.ind==1,]
oncogenic.ssGSEA.val <- oncogenic.ssGSEA.df[sample.ind==2,]
library(randomForest)
oncogenic.rF<-randomForest(formula = oncogenic.ssGSEA.dev$annotation ~ ., data = oncogenic.ssGSEA.dev)
summary(oncogenic.rF)
plot(oncogenic.rF)
varImpPlot(oncogenic.rF, n.var=20)
predict(oncogenic.rF, oncogenic.ssGSEA.dev)
predict(oncogenic.rF, oncogenic.ssGSEA.val)
oncogenic.ssGSEA.t<-t(oncogenic.ssGSEA)
annotation <- as.factor(c(rep.int(1, 33), rep.int(0, 33)))
oncogenic.ssGSEA.df <- as.data.frame(oncogenic.ssGSEA.t)
oncogenic.ssGSEA.df <- cbind(annotation, oncogenic.ssGSEA.df)
##modified from http://dni-institute.in/blogs/random-forest-using-r-step-by-step-tutorial/
#sample.ind <- sample(2,
#                     nrow(oncogenic.ssGSEA.df),
#                     replace = T,
#                     prob = c(0.6,0.4))
#oncogenic.ssGSEA.dev <- oncogenic.ssGSEA.df[sample.ind==1,]
#oncogenic.ssGSEA.val <- oncogenic.ssGSEA.df[sample.ind==2,]
oncogenic.rFull<-randomForest(formula = oncogenic.ssGSEA.df$annotation ~ ., data = oncogenic.ssGSEA.df)
summary(oncogenic.rFull)
pdf("oncogenic.randomforest.pdf")
plot(oncogenic.rFull)
varImpPlot(oncogenic.rFull, n.var=20)
dev.off()
library(glmnet)
oncogenic.input <- oncogenic.ssGSEA.t
annotation <- c(rep.int(1, 33), rep.int(0, 33))
oncogenic.glm<-glmnet(x = oncogenic.input, y = annotation, alpha =1)
pdf("oncogenicGLMnet.pdf")
plot.glmnet(oncogenic.glm)
dev.off()
print.glmnet(oncogenic.glm)
coef.glmnet(oncogenic.glm)
#####################################################################
hallmark.ssGSEA.t<-t(hallmark.ssGSEA)
annotation <- as.factor(c(rep.int(1, 33), rep.int(0, 33)))
hallmark.ssGSEA.df <- as.data.frame(hallmark.ssGSEA.t)
hallmark.ssGSEA.df <- cbind(annotation, hallmark.ssGSEA.df)
##modified from http://dni-institute.in/blogs/random-forest-using-r-step-by-step-tutorial/
sample.ind <- sample(2,
nrow(hallmark.ssGSEA.df),
replace = T,
prob = c(0.6,0.4))
hallmark.ssGSEA.dev <- hallmark.ssGSEA.df[sample.ind==1,]
hallmark.ssGSEA.val <- hallmark.ssGSEA.df[sample.ind==2,]
hallmark.rF<-randomForest(formula = hallmark.ssGSEA.df$annotation ~ ., data = hallmark.ssGSEA.df)
summary(hallmark.rF)
pdf("hallmark.randomforest.pdf")
plot(hallmark.rF)
varImpPlot(hallmark.rF, n.var=20)
dev.off()
predict(hallmark.rF, hallmark.ssGSEA.dev)
predict(hallmark.rF, hallmark.ssGSEA.val)
hallmark.input <- hallmark.ssGSEA.t
annotation <- c(rep.int(1, 33), rep.int(0, 33))
hallmark.glm<-glmnet(x = hallmark.input, y = annotation, alpha =1)
pdf("hallmarkGLMnet.pdf")
plot.glmnet(hallmark.glm)
dev.off()
print.glmnet(hallmark.glm)
coef.glmnet(hallmark.glm)
#####################################################################
immunologic.ssGSEA.t<-t(immunologic.ssGSEA)
annotation <- as.factor(c(rep.int(1, 33), rep.int(0, 33)))
immunologic.ssGSEA.df <- as.data.frame(immunologic.ssGSEA.t)
immunologic.ssGSEA.df <- cbind(annotation, immunologic.ssGSEA.df)
##modified from http://dni-institute.in/blogs/random-forest-using-r-step-by-step-tutorial/
sample.ind <- sample(2,
nrow(immunologic.ssGSEA.df),
replace = T,
prob = c(0.6,0.4))
immunologic.ssGSEA.dev <- immunologic.ssGSEA.df[sample.ind==1,]
immunologic.ssGSEA.val <- immunologic.ssGSEA.df[sample.ind==2,]
immunologic.ssGSEA.df2 <- immunologic.ssGSEA.df[1:411]
library(randomForest)
immunologic.rF<-randomForest(formula = immunologic.ssGSEA.df2$annotation ~ ., data = immunologic.ssGSEA.df2)
pdf("immunologic.randomforest.pdf")
summary(immunologic.rF)
plot(immunologic.rF)
dev.off()
varImpPlot(immunologic.rF, n.var=20)
predict(immunologic.rF, immunologic.ssGSEA.dev)
predict(immunologic.rF, immunologic.ssGSEA.val)
immunologic.input <- immunologic.ssGSEA.t
annotation <- c(rep.int(1, 33), rep.int(0, 33))
immunologic.glm<-glmnet(x = immunologic.input, y = annotation, alpha =1)
pdf("immunologicGLMnetc.randomforest.pdf")
plot.glmnet(immunologic.glm)
dev.off()
print.glmnet(immunologic.glm)
coef.glmnet(immunologic.glm)
#####################################################################
annotation.names <- c(rep.int("dNF", 33), rep.int("skin", 33))
oncogenic.ssGSEA.df2 <- cbind(annotation.names, oncogenic.ssGSEA.df[,-1])
oncogenic.ttest <- as.data.frame(sapply(oncogenic.ssGSEA.df2[2:190],
function(x) t.test(x ~ oncogenic.ssGSEA.df2$annotation.names)))
p <- unlist(oncogenic.ttest[3,])
p <- signif(p.adjust(oncogenic.BH, method = "BH"), 3)
p.df <- t(as.data.frame(p))
colnames(p.df) <- sub(".p.value", "", colnames(p.df))
p.df$pathway <- rownames(p.df)
psig <- dplyr::filter(p.df,p<0.05)
#######################
hallmark.ssGSEA.df2 <- cbind(annotation.names, hallmark.ssGSEA.df[,-1])
hallmark.ttest <- as.data.frame(sapply(hallmark.ssGSEA.df2[2:51],
function(x) t.test(x ~ hallmark.ssGSEA.df2$annotation.names)))
p <- c(unlist(hallmark.ttest[3,]))
p <- signif(p.adjust(p, method = "BH"), 3)
p.df <- as.data.frame(p)
rownames(p.df) <- sub(".p.value", "", rownames(p.df))
write.table(p.df, file = 'hallmark_p_values.txt', sep = "\t")
pdf('hallmark_res.pdf')
plots <- apply(as.array(colnames(hallmark.ssGSEA.df2)[2:51]),1,FUN=function (x)
qplot(annotation.names, hallmark.ssGSEA.df2[,x], data = hallmark.ssGSEA.df2) +
geom_boxplot(fill=c("red", "blue")) +
xlab("sample type") +
ylab(x) +
ggtitle(paste(x))
)
dev.off()
p.df$pathway <- rownames(p.df)
psig <- dplyr::filter(p.df,p<0.05)
######################################
oncogenic.ssGSEA.df2 <- cbind(annotation.names, oncogenic.ssGSEA.df[,-1])
oncogenic.ttest <- as.data.frame(sapply(oncogenic.ssGSEA.df2[2:51],
function(x) t.test(x ~ oncogenic.ssGSEA.df2$annotation.names)))
p <- c(unlist(oncogenic.ttest[3,]))
p <- signif(p.adjust(p, method = "BH"), 3)
p.df <- as.data.frame(p)
rownames(p.df) <- sub(".p.value", "", rownames(p.df))
write.table(p.df, file = 'oncogenic_p_values.txt', sep = "\t")
pdf('oncogenic_res.pdf')
plots <- apply(as.array(colnames(oncogenic.ssGSEA.df2)[2:51]),1,FUN=function (x)
qplot(annotation.names, oncogenic.ssGSEA.df2[,x], data = oncogenic.ssGSEA.df2) +
geom_boxplot(fill=c("red", "blue")) +
xlab("sample type") +
ylab(x) +
ggtitle(paste(x))
)
dev.off()
p.df$pathway <- rownames(p.df)
psig <- dplyr::filter(p.df,p<0.05)
##############################################
immunologic.ssGSEA.df2 <- cbind(annotation.names, immunologic.ssGSEA.df[,-1])
immunologic.ttest <- as.data.frame(sapply(immunologic.ssGSEA.df2[2:51],
function(x) t.test(x ~ immunologic.ssGSEA.df2$annotation.names)))
p <- c(unlist(immunologic.ttest[3,]))
p <- signif(p.adjust(p, method = "BH"), 3)
p.df <- as.data.frame(p)
rownames(p.df) <- sub(".p.value", "", rownames(p.df))
write.table(p.df, file = 'immunologic_p_values.txt', sep = "\t")
pdf('immuno_res.pdf')
plots <- apply(as.array(colnames(immunologic.ssGSEA.df2)[2:51]),1,FUN=function (x)
qplot(annotation.names, immunologic.ssGSEA.df2[,x], data = immunologic.ssGSEA.df2) +
geom_boxplot(fill=c("red", "blue")) +
xlab("sample type") +
ylab(x) +
ggtitle(paste(x))
)
dev.off()
p.df$pathway <- rownames(p.df)
psig <- dplyr::filter(p.df,p<0.05)
pdf('immuno_res.pdf')
plots <- apply(as.array(colnames(immunologic.ssGSEA.df2)[2:51]),1,FUN=function (x)
qplot(annotation.names, immunologic.ssGSEA.df2[,x], data = immunologic.ssGSEA.df2) +
geom_boxplot(fill=c("red", "blue")) +
xlab("sample type") +
ylab(x) +
ggtitle(paste(x))
)
dev.off()
pdf('immuno_res.pdf')
apply(as.array(colnames(immunologic.ssGSEA.df2)[2:51]),1,FUN=function (x)
qplot(annotation.names, immunologic.ssGSEA.df2[,x], data = immunologic.ssGSEA.df2) +
geom_boxplot(fill=c("red", "blue")) +
xlab("sample type") +
ylab(x) +
ggtitle(paste(x))
)
dev.off()
apply(as.array(colnames(immunologic.ssGSEA.df2)[2:51]),1,FUN=function (x)
qplot(annotation.names, immunologic.ssGSEA.df2[,x], data = immunologic.ssGSEA.df2) +
geom_boxplot(fill=c("red", "blue")) +
xlab("sample type") +
ylab(x) +
ggtitle(paste(x))
)
pdf('immuno_res.pdf')
apply(as.array(colnames(immunologic.ssGSEA.df2)[2:51]),1,FUN=function (x)
qplot(annotation.names, immunologic.ssGSEA.df2[,x], data = immunologic.ssGSEA.df2) +
geom_boxplot(fill=c("red", "blue")) +
xlab("sample type") +
ylab(x) +
ggtitle(paste(x))
)
apply(as.array(colnames(immunologic.ssGSEA.df2)[2:4873]),1,FUN=function (x)
qplot(annotation.names, immunologic.ssGSEA.df2[,x], data = immunologic.ssGSEA.df2) +
geom_boxplot(fill=c("red", "blue")) +
xlab("sample type") +
ylab(x) +
ggtitle(paste(x))
)
dev.off()
i
pdf('immuno_res.pdf')
apply(as.array(colnames(immunologic.ssGSEA.df2)[2:4873]),1,FUN=function (x)
qplot(annotation.names, immunologic.ssGSEA.df2[,x], data = immunologic.ssGSEA.df2) +
geom_boxplot(fill=c("red", "blue")) +
xlab("sample type") +
ylab(x) +
ggtitle(paste(x))
)
dev.off()
pdf('immuno_res.pdf')
apply(as.array(colnames(immunologic.ssGSEA.df2)[2:4873]),1,FUN=function (x)
qplot(annotation.names, immunologic.ssGSEA.df2[,x], data = immunologic.ssGSEA.df2) +
geom_boxplot(fill=c("red", "blue")) +
xlab("sample type") +
ylab(x) +
ggtitle(paste(x))
)
apply(as.array(colnames(immunologic.ssGSEA.df2)[2:3]),1,FUN=function (x)
qplot(annotation.names, immunologic.ssGSEA.df2[,x], data = immunologic.ssGSEA.df2) +
geom_boxplot(fill=c("red", "blue")) +
xlab("sample type") +
ylab(x) +
ggtitle(paste(x))
)
dev.off()
apply(as.array(colnames(immunologic.ssGSEA.df2)[2:3]),1,FUN=function (x)
qplot(annotation.names, immunologic.ssGSEA.df2[,x], data = immunologic.ssGSEA.df2) +
geom_boxplot(fill=c("red", "blue")) +
xlab("sample type") +
ylab(x) +
ggtitle(paste(x))
)
pdf('immuno_res.pdf')
apply(as.array(colnames(immunologic.ssGSEA.df2)[2:3]),1,FUN=function (x)
qplot(annotation.names, immunologic.ssGSEA.df2[,x], data = immunologic.ssGSEA.df2) +
geom_boxplot(fill=c("red", "blue")) +
xlab("sample type") +
ylab("ssGSEA output") +
ggtitle(paste(x))
)
dev.off()
pdf('immuno_res.pdf')
apply(as.array(colnames(immunologic.ssGSEA.df2)[2:4873]),1,FUN=function (x)
qplot(annotation.names, immunologic.ssGSEA.df2[,x], data = immunologic.ssGSEA.df2) +
geom_boxplot(fill=c("red", "blue")) +
xlab("sample type") +
ylab("ssGSEA output") +
ggtitle(paste(x))
)
dev.off()
###plot scores
source("../../bin/wgsAnalysis.R")
###plot scores
source("../../bin/wgsAnalysis.R")
source("../../bin/geneSampleMatrix.R")
library(ggplot2)
this.script='https://raw.githubusercontent.com/sgosline/dNFLandscape/master/analysis/2016-12-02/plotGenesOfInterest.R'
p05='syn6097853'
p1='syn6099307'
#compare germline/somatic mutations to various f
plotGeneAcrossScores<-function(patient.sample.vars,patient.sample.muts,geneName,testName){
##figure out how many samples we have in common
overlap<-intersect(names(patient.sample.vars),colnames(patient.sample.muts))
print(paste('We have',length(overlap),'samples to check for mutation correlates'))
if(!geneName%in%rownames(patient.sample.muts))
return(data.frame())
df<-data.frame(geneMutated=patient.sample.muts[geneName,overlap],score=patient.sample.vars[overlap])
#colnames(df)<-c(paste(geneName,'mutation'),paste(testName,'score'))
p<-ggplot()+geom_boxplot(data=df,aes(x=geneMutated,y=score))+geom_jitter(data=df,aes(x=geneMutated,y=score,color=geneMutated))+ggtitle(paste(geneName,'mutation status by\n',testName,'scores'))
print(p)
ggsave(paste(geneName,'mutationsBy',testName,'score.png',sep='_'))
return(df)
}
som.vars<-somaticGeneSampleMatrix()
germ.vars<-germlineGeneSampleMatrix()
##germline variants that correlate with somatic burden....
patients<-sapply(colnames(germ.vars),function(x) unlist(strsplit(x,split=' '))[2])
patient.vars<-sapply(unique(patients),function(x){
apply(germ.vars[,which(patients==x)],1,function(y) any(y))
})
gl.vars.by.sample<-patient.vars[,patients]
colnames(gl.vars.by.sample)<-colnames(germ.vars)
cib.scores<-read.table(synGet('syn5809355')@filePath,sep=',',header=T)
rownames(cib.scores)<-tolower(patient_tumor_number_rna(sapply(cib.scores$Input.Sample,function(x) gsub('”','',x))))
est.scores<-read.table(synGet('syn5908274')@filePath)
##get patient scores
colnames(est.scores)<-tolower(patient_tumor_number_rna(colnames(est.scores),quant='featureCounts'))
####
genelist=c('RAD9A','APTX','APEX1','GEN1','HIBCH','TBCK','SOS1','RABGAP','SGSM3','DOCK4','MUC1','BRD7','STAG2','CTDP1','CDC27','CREBBP')
cib.paths=c("Mast.cells.resting","Macrophages.M2")
#est.paths=c("ESTIMATEScore")
for(gene in genelist){
for(cp in cib.paths){
cs<-cib.scores[,cp]
names(cs)<-rownames(cib.scores)
plotGeneAcrossScores(cs,gl.vars.by.sample,gene,paste(cp,'Germline',sep=''))
plotGeneAcrossScores(cs,som.vars,gene,paste(cp,'Somatic',sep=''))
}
es<-as.numeric(est.scores['ESTIMATEScore',])
names(es)<-colnames(est.scores)
plotGeneAcrossScores(es,gl.vars.by.sample,gene,paste('EstimateGermline',sep=''))
plotGeneAcrossScores(es,som.vars,gene,paste('EstimateSomatic',sep=''))
}
setwd("~/Documents/dNFLandscape/analysis/2016-12-02")
names(es)<-colnames(est.scores)
###plot scores
source("../../bin/wgsAnalysis.R")
source("../../bin/geneSampleMatrix.R")
library(ggplot2)
this.script='https://raw.githubusercontent.com/sgosline/dNFLandscape/master/analysis/2016-12-02/plotGenesOfInterest.R'
p05='syn6097853'
p1='syn6099307'
#compare germline/somatic mutations to various f
plotGeneAcrossScores<-function(patient.sample.vars,patient.sample.muts,geneName,testName){
##figure out how many samples we have in common
overlap<-intersect(names(patient.sample.vars),colnames(patient.sample.muts))
print(paste('We have',length(overlap),'samples to check for mutation correlates'))
if(!geneName%in%rownames(patient.sample.muts))
return(data.frame())
df<-data.frame(geneMutated=patient.sample.muts[geneName,overlap],score=patient.sample.vars[overlap])
#colnames(df)<-c(paste(geneName,'mutation'),paste(testName,'score'))
p<-ggplot()+geom_boxplot(data=df,aes(x=geneMutated,y=score))+geom_jitter(data=df,aes(x=geneMutated,y=score,color=geneMutated))+ggtitle(paste(geneName,'mutation status by\n',testName,'scores'))
print(p)
ggsave(paste(geneName,'mutationsBy',testName,'score.png',sep='_'))
return(df)
}
som.vars<-somaticGeneSampleMatrix()
germ.vars<-germlineGeneSampleMatrix()
##germline variants that correlate with somatic burden....
patients<-sapply(colnames(germ.vars),function(x) unlist(strsplit(x,split=' '))[2])
patient.vars<-sapply(unique(patients),function(x){
apply(germ.vars[,which(patients==x)],1,function(y) any(y))
})
gl.vars.by.sample<-patient.vars[,patients]
colnames(gl.vars.by.sample)<-colnames(germ.vars)
cib.scores<-read.table(synGet('syn5809355')@filePath,sep=',',header=T)
rownames(cib.scores)<-tolower(patient_tumor_number_rna(sapply(cib.scores$Input.Sample,function(x) gsub('”','',x))))
est.scores<-read.table(synGet('syn5908274')@filePath)
##get patient scores
colnames(est.scores)<-tolower(patient_tumor_number_rna(colnames(est.scores),quant='featureCounts'))
####
genelist=c('RAD9A','APTX','APEX1','GEN1','HIBCH','TBCK','SOS1','RABGAP','SGSM3','DOCK4','MUC1','BRD7','STAG2','CTDP1','CDC27','CREBBP')
cib.paths=c("Mast.cells.resting","Macrophages.M2")
#est.paths=c("ESTIMATEScore")
for(gene in genelist){
for(cp in cib.paths){
cs<-cib.scores[,cp]
names(cs)<-rownames(cib.scores)
plotGeneAcrossScores(cs,gl.vars.by.sample,gene,paste(cp,'Germline',sep=''))
plotGeneAcrossScores(cs,som.vars,gene,paste(cp,'Somatic',sep=''))
}
es<-as.numeric(est.scores['ESTIMATEScore',])
names(es)<-colnames(est.scores)
plotGeneAcrossScores(es,gl.vars.by.sample,gene,paste('EstimateGermline',sep=''))
plotGeneAcrossScores(es,som.vars,gene,paste('EstimateSomatic',sep=''))
}
source("../../bin/wgsAnalysis.R")
source("../../bin/geneSampleMatrix.R")
source("../../analysis/2016-09-20/geneSampleMatrix.R")
library(ggplot2)
this.script='https://raw.githubusercontent.com/sgosline/dNFLandscape/master/analysis/2016-12-02/plotGenesOfInterest.R'
p05='syn6097853'
p1='syn6099307'
plotGeneAcrossScores<-function(patient.sample.vars,patient.sample.muts,geneName,testName){
##figure out how many samples we have in common
overlap<-intersect(names(patient.sample.vars),colnames(patient.sample.muts))
print(paste('We have',length(overlap),'samples to check for mutation correlates'))
if(!geneName%in%rownames(patient.sample.muts))
return(data.frame())
df<-data.frame(geneMutated=patient.sample.muts[geneName,overlap],score=patient.sample.vars[overlap])
#colnames(df)<-c(paste(geneName,'mutation'),paste(testName,'score'))
p<-ggplot()+geom_boxplot(data=df,aes(x=geneMutated,y=score))+geom_jitter(data=df,aes(x=geneMutated,y=score,color=geneMutated))+ggtitle(paste(geneName,'mutation status by\n',testName,'scores'))
print(p)
ggsave(paste(geneName,'mutationsBy',testName,'score.png',sep='_'))
return(df)
}
som.vars<-somaticGeneSampleMatrix()
germ.vars<-germlineGeneSampleMatrix()
patients<-sapply(colnames(germ.vars),function(x) unlist(strsplit(x,split=' '))[2])
patient.vars<-sapply(unique(patients),function(x){
apply(germ.vars[,which(patients==x)],1,function(y) any(y))
})
gl.vars.by.sample<-patient.vars[,patients]
colnames(gl.vars.by.sample)<-colnames(germ.vars)
cib.scores<-read.table(synGet('syn5809355')@filePath,sep=',',header=T)
rownames(cib.scores)<-tolower(patient_tumor_number_rna(sapply(cib.scores$Input.Sample,function(x) gsub('”','',x))))
est.scores<-read.table(synGet('syn5908274')@filePath)
colnames(est.scores)<-tolower(patient_tumor_number_rna(colnames(est.scores),quant='featureCounts'))
genelist=c('RAD9A','APTX','APEX1','GEN1','HIBCH','TBCK','SOS1','RABGAP','SGSM3','DOCK4','MUC1','BRD7','STAG2','CTDP1','CDC27','CREBBP')
cib.paths=c("Mast.cells.resting","Macrophages.M2")
for(gene in genelist){
for(cp in cib.paths){
cs<-cib.scores[,cp]
names(cs)<-rownames(cib.scores)
plotGeneAcrossScores(cs,gl.vars.by.sample,gene,paste(cp,'Germline',sep=''))
plotGeneAcrossScores(cs,som.vars,gene,paste(cp,'Somatic',sep=''))
}
es<-as.numeric(est.scores['ESTIMATEScore',])
names(es)<-colnames(est.scores)
plotGeneAcrossScores(es,gl.vars.by.sample,gene,paste('EstimateGermline',sep=''))
plotGeneAcrossScores(es,som.vars,gene,paste('EstimateSomatic',sep=''))
}
genelist=c('RAD9A' OR 'APTX','APEX1','GEN1','HIBCH','TBCK','SOS1','RABGAP','SGSM3','DOCK4','MUC1','BRD7','STAG2','CTDP1','CDC27','CREBBP')
genelist=c('RAD9A OR APTX','APEX1','GEN1','HIBCH','TBCK','SOS1','RABGAP','SGSM3','DOCK4','MUC1','BRD7','STAG2','CTDP1','CDC27','CREBBP')
for(gene in genelist){
for(cp in cib.paths){
cs<-cib.scores[,cp]
names(cs)<-rownames(cib.scores)
plotGeneAcrossScores(cs,gl.vars.by.sample,gene,paste(cp,'Germline',sep=''))
plotGeneAcrossScores(cs,som.vars,gene,paste(cp,'Somatic',sep=''))
}
es<-as.numeric(est.scores['ESTIMATEScore',])
names(es)<-colnames(est.scores)
plotGeneAcrossScores(es,gl.vars.by.sample,gene,paste('EstimateGermline',sep=''))
plotGeneAcrossScores(es,som.vars,gene,paste('EstimateSomatic',sep=''))
}
View(gl.vars.by.sample)
View(expr.gene.muts1)
View(all.gene.muts)
